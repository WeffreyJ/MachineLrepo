# -*- coding: utf-8 -*-
"""buildAndTrainIMDBModel

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1whGglpibQqIp7xWG9hPyo1MsDf9Ryncw
"""

import tensorflow as tf
import tensorflow_hub as hub
import tensorflow_datasets as tfds

# Load the IMDB dataset
train_data, validation_data = tfds.load(
    'imdb_reviews',
    split=['train[:80%]', 'train[35%:]'],  # 80% for training, 20% for validation
    as_supervised=True  # Return (text, label) pairs
)

# Batch and prefetch the datasets
train_data = train_data.shuffle(10000).batch(32).prefetch(tf.data.AUTOTUNE)
validation_data = validation_data.batch(32).prefetch(tf.data.AUTOTUNE)

# Load the pre-trained model from TensorFlow Hub
hub_url = "https://tfhub.dev/google/universal-sentence-encoder/4"
pretrained_model = hub.load(hub_url)

import tensorflow as tf

# Define a custom layer that applies the pre-trained model
class EmbeddingLayer(tf.keras.layers.Layer):
    def __init__(self, pretrained_model):
        super(EmbeddingLayer, self).__init__()
        self.pretrained_model = pretrained_model

    def call(self, inputs):
        return self.pretrained_model(inputs)

# Function to compute output shape
def compute_output_shape(input_shape):
    # Dynamically determine output shape based on pretrained model
    test_input = tf.convert_to_tensor(["sample text"], dtype=tf.string)

# ... (rest of your code remains the same)

# Function to compute output shape
def compute_output_shape(input_shape):
    # Dynamically determine output shape based on pretrained model
    test_input = tf.convert_to_tensor(["sample text"], dtype=tf.string)
    output_shape = pretrained_model(test_input).shape
    return (input_shape[0], output_shape[-1])  # Return (batch_size, embedding_dim)



# Input layer
inputs = tf.keras.Input(shape=(), dtype=tf.string)

# Use the custom embedding layer with explicit output shape
embedding = tf.keras.layers.Lambda(lambda x: pretrained_model(x),
                                   output_shape=compute_output_shape)(inputs)

# Debugging: Print the shape after the Lambda layer
print(f"Shape after Lambda layer: {embedding.shape}")

# Add a dense layer
x = tf.keras.layers.Dense(64, activation='relu')(embedding)

# Debugging: Print the shape after the Dense layer
print(f"Shape after Dense layer: {x.shape}")

# Add a dropout layer
x = tf.keras.layers.Dropout(0.5)(x)

# Output layer
outputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)

# Create the model
model = tf.keras.Model(inputs=inputs, outputs=outputs)

# Run a forward pass with dummy data to further debug
dummy_data = tf.convert_to_tensor(["sample input string"], dtype=tf.string)
output = model(dummy_data)
print(f"Output shape: {output.shape}")


# Compile the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Summary of the model
model.summary()